#                   :::                         The
#     iLE88Dj.  :jD88888Dj:
#   .LGitE888D.f8GjjjL8888E;        .d8888b.  888b    888 888     888
#   iE   :8888Et.     .G8888.      d88P  Y88b 8888b   888 888     888
#   ;i    E888,        ,8888,      888    888 88888b  888 888     888
#         D888,        :8888:      888        888Y88b 888 888     888
#         D888,        :8888:      888  88888 888 Y88b888 888     888
#         D888,        :8888:      888    888 888  Y88888 888     888
#         D888,        :8888:      Y88b  d88P 888   Y8888 Y88b. .d88P
#         888W,        :8888:       "Y8888P88 888    Y888  "Y88888P"
#         W88W,        :8888:
#         W88W:        :8888:      88888b.   8888b.  88888b.   .d88b.
#         DGGD:        :8888:      888 "88b     "88b 888 "88b d88""88b
#                      :8888:      888  888 .d888888 888  888 888  888
#                      :W888:      888  888 888  888 888  888 Y88..88P
#                      :8888:      888  888 "Y888888 888  888  "Y88P"
#                       E888i
#                       tW88D             Text Editor Config File
#
#          ######################################################
#          # Configuration file for nano. It was made from:     #
#          # http://www.nano-editor.org/dist/v2.2/nanorc.5.html #
#          ######################################################

# nanorc − GNU nano’s rcfile
# DESCRIPTION

# This manual page briefly documents GNU nano’s rcfile.

# nano is a small, free and friendly editor which aims to replace Pico, the
# default editor included in the non-free Pine package. Rather than just
# copying Pico’s look and feel, nano also implements some missing (or disabled
# by default) features in Pico, such as "search and replace" and "go to line
# and column number".

# The nanorc file contains the default settings for nano. It should not be in
# DOS or Mac format. During startup, nano will first read its system-wide
# settings from SYSCONFDIR/nanorc, and then user-specific settings from
# ~/.nanorc.

#syntax highlighting
include /usr/share/nano/*.nanorc

# OPTIONS

# The configuration file accepts a series of set and unset commands, which can
# be used to configure nano on startup without using the command line options.
# Additionally, the syntax, color, and icolor keywords are used to define
# syntax highlighting rules for different text patterns. nano will read one
# command per line.

# Options in nanorc files take precedence over nano’s defaults, and command
# line options override nanorc settings. Also, options are unset by default,
# except for those that take arguments.

# Quotes inside string parameters don’t have to be escaped with backslashes.
# The last double quote in the string will be treated as its end. For example,
# for the brackets option, ""’)>]}" will match ", ’, ), >, ], and }.

# The supported commands and arguments are:

# set/unset commands
# set allow_insecure_backup
	# When backing up files, allow the backup to succeed even if its
	# permissions can’t be (re)set due to special OS considerations.
	# You should NOT enable this option unless you are sure you need it.

set autoindent	# Use auto-indentation.
# set backup	# Create backup files in filename~.
# set backupdir directory
	# Set the directory where nano puts unique backup files if file
	# backups are enabled.

# set backwards	# Do backwards searches by default.
# set boldtext	# Use bold text instead of reverse video text.
# set brackets string
	# Set the characters treated as closing brackets when justifying
	# paragraphs. They cannot contain blank characters. Only closing
	# punctuation, optionally followed by closing brackets, can end
	# sentences. The default value is ""’)>]}".

# set casesensitive	# Do case sensitive searches by default.
set const	# Constantly display the cursor position in the status bar.
# set cut	# Use cut to end of line by default.
# set fill n	# Wrap lines at column number n.
	# If n is 0 or less, the maximum line length will be the screen width
	# less n columns. The default value is −8.

# set historylog
	# Enable ~/.nano_history for saving and reading
	# search/replace strings.

# set matchbrackets string
	# Set the opening and closing brackets that can be found by bracket
	# searches. They cannot contain blank characters. The former set
	# must come before the latter set, and both must be in the same order.
	# The default value is "(<[{)>]}".

# set morespace	# Use the blank line below the titlebar as extra editing space.
# set mouse	# Enable mouse support, if available for your system.
	# When enabled, mouse clicks can be used to place the cursor, set the
	# mark (with a double click), and execute shortcuts. The mouse will
	# work in the X Window System, and on the console when gpm is running.

# set multibuffer	# Allow inserting files into their own buffers.
# set noconvert	# Don’t convert files from DOS/Mac format.
# set nofollow	# Don’t follow symlinks when writing files.
# set nohelp	# Don’t display the help lists at the bottom of the screen.
# set nonewlines	# Don’t add newlines to the ends of files.
set nowrap	# Don’t wrap text at all.
# set operatingdir directory
	# nano will only read and write files inside directory and its
	# subdirectories. Also, the current directory is changed to here, so
	# files are inserted from this diractory. By default, the operating
	# directory feature is turned off.

# set preserve	# Preserve the XON and XOFF keys (^Q and ^S).
# set punct string
	# Set the characters treated as closing punctuation when justifying
	# paragraphs. They cannot contain blank characters. Only closing
	# punctuation, optionally followed by closing brackets, can end
	# sentences. The default value is "!.?".

# set quiet
	# nano will not report errors in the nanorc file and ask them to be
	# acknowledged by pressing enter at startup. If this is used it should
	# be placed at the top of the file to be fully effective.

# set quickblank	# Do quick statusbar blanking.
	# Statusbar messages will disappear after 1 keystroke instead of 25.

# set quotestr string
	# The email-quote string, used to justify email-quoted paragraphs.
	# This is an extended regular expression if your system supports them,
	# otherwise a literal string. The default value is "^([ \t]*[#:>\|}])+"
	# if you have extended regular expression support, or "> " otherwise.
	# Note that ’\t’ stands for a literal Tab character.

# set rebinddelete
	# Interpret the Delete key differently so that both Backspace and
	# Delete work properly. You should only need to use this option if
	# Backspace acts like Delete on your system.

# set rebindkeypad
	# Interpret the numeric keypad keys so that they all work properly.
	# You should only need to use this option if they don’t, as mouse
	# support won’t work properly with this option enabled.

# set regexp	# Do extended regular expression searches by default.

set smarthome	# Make the Home key smarter.
	# When Home is pressed anywhere but at the very beginning of
	# non-whitespace characters on a line, the cursor will jump to that
	# beginning (either forwards or backwards). If the cursor is already
	# at that position, it will jump to the true beginning of the line.

# set smooth	# Use smooth scrolling by default.
set softwrap
	# Enable soft line wrapping for easier viewing of very long lones.

# set speller spellprog
	# Use spelling checker spellprog instead of the built-in one, which calls spell.

# set suspend	# Allow nano to be suspended.
# set tabsize n	# Use a tab size of n columns.
	# The value of n must be greater than 0. The default value is 8.

# set tabstospaces	# Convert typed tabs to spaces.
# set tempfile		# Save automatically on exit, don’t prompt.
# set undo	# Enable experimental generic-purpose undo code.
# set view	# Disallow file modification.

# set whitespace string
	# Set the two characters used to display the first characters of tabs
	# and spaces. They must be single-column characters.

# set wordbounds
	# Detect word boundaries more accurately by treating punctuation
	# characters as parts of words.

# syntax str ["fileregex" ... ]
	# Defines a syntax named str which can be activated via the −Y/−−syntax
	# command line option, or will be automatically activated if the
	# current filename matches the extended regular expression fileregex.
	# All following color and icolor statements will apply to syntax until
	# a new syntax is defined.
	#
	# The none syntax is reserved; specifying it on the command line is
	# the same as not having a syntax at all. The default syntax is
	# special: it takes no fileregex, and applies to files that don’t match
	# any other syntax’s fileregex.

# color fgcolor,bgcolor regex ...
	# For the currently defined syntax, display all expressions matching
	# the extended regular expression regex with foreground color fgcolor
	# and background color bgcolor, at least one of which must be
	# specified. Legal colors for foreground and background color are:
	# white, black, red, blue, green, yellow, magenta, and cyan. You may
	# use the prefix "bright" to force a stronger color highlight for the
	# foreground. If your terminal supports transparency, not specifying a
	# bgcolor tells nano to attempt to use a transparent background.

# icolor fgcolor,bgcolor regex ...
	# Same as above, except that the expression matching is case
	# insensitive.

# color fgcolor,bgcolor start="sr" end="er"
	# Display expressions which start with the extended regular expression
	# sr and end with the extended regular expression er with foreground
	# color fgcolor and background color bgcolor, at least one of which
	# must be specified. This allows syntax highlighting to span multiple
	# lines. Note that all subsequent instances of sr after an initial sr
	# is found will be highlighted until the first instance of er.

# icolor fgcolor,bgcolor start="sr" end="er"
	# Same as above, except that the expression matching is case
	# insensitive.

# include syntaxfile	# Read in self-contained color syntaxes from syntaxfile.
	# Note that syntaxfile can only contain syntax, color, and icolor
	# commands.

# KEY BINDINGS

# Key bindings may be reassigned via the following commands:
# bind key function menu
	# Rebinds the key key to a new function named function in the context
	# of menu menu.
# 	
# unbind key menu
	# Unbind the key key from the menu named menu or from all menus by
	# using all. Same key syntax as for binding. Rebinds the key key to a
	# new function named function in the context of menu menu.

# The format of key should be one of:

# ^	followed by an alpha character or the word "Space". Example: ^C
# M-	followed by a printable character or the word "Space". Example: M-C
# F	followed by a numeric value from 1 to 16. Example: F10

# Valid function names to be bound include:
# help	# Invoke the help menu.
bind ^H help main
# cancel	# Cancel the current command.
bind ^Q cancel all
bind ^C cancel all
bind ^X cancel all
# exit	# Exit from the program.
bind ^X exit main
bind ^Q exit main
bind ^X exit help
bind ^Q exit help
# writeout	# Write the current buffer to disk.
bind ^S writeout main
# justify	# Justify the current text.
# insert	# Insert a file into the current buffer
	# (or into a new buffer when multibuffer is enabled).
	
# whereis	# Search for text in the current buffer.
bind ^F whereis main
# searchagain	# Repeat the last search command.
bind ^W searchagain main
# up	# Move up in the editor or browser.
# down	# Move down in the editor or browser.
# left	# Move left in the editor or browser.
# right	# Move right in the editor or browser.
# cut	# Cut the current line of text and store it.
bind ^C cut main
# uncut	# Copy the currently stored text into the current buffer position.
bind ^V uncut main
# curpos	# Show the current line, column, word positions in the file.
# firstline	# Move to the first line of the file.
# lastline	# Move to the last line of the file.
# gotoline	# Move to a specific line (and column if specified).
# replace	# Interactively replace text within the current buffer.
# mark	# Begin selecting text for cutting or pasting at the current position.
# copytext	# Copy the currently marked text without deleting it.
# indent	# Indent the currently marked text (shift to the right).
# unindent	# Un-indent the currently marked text (shift to the left).
# nextword	# Move the cursor to the beginning of the next word.
# prevword	# Move the cursor to the beginning of the previous word.
# home	# Move the cursor to the beginning of the current line.
# end	# Move the cursor to the end of the current line.
# beginpara	# Move the cursor to the beginning of the current paragraph.
# endpara	# Move the cursor to the end of the current paragraph.
# findbracket
	# Move the cursor to the matching bracket (brace, parenthesis, etc.)
	# of the one under the cursor.
	
# scrollup	# Scroll up one line of text from the current position.
# scrolldown	# Scroll down one line of text from the current position.
# prevbuf
	# Switch to editing/viewing the previous buffer when using multibuffer
	# mode.

# nextbuf
	# Switch to editing/viewing the next buffer when using multibuffer
	# mode.

# verbatim	# Insert the next character verbatim into the file.
# tab	# Insert a tab at the current cursor location.
# enter	# Insert a new line below the current one.
# delete	# Delete the character under the cursor.
# fulljustify	# Justify the entire current file.
# wordcount	# Count the number of words in the current buffer.
# refresh	# Refresh the screen.
# undo	# Undo the text action peformed (add text, delete text, etc).
# redo	# Redo the last undone action (i.e., undo an undo).
# suspend	# Suspend the editor
	# (if the suspend function is enabled, see the "suspendenable"
	# entry below).

# casesens
	# Toggle case sensitivity in searching (search/replace menus only).

# regexp
	# Toggle whether searching/replacing is based on literal strings or
	# regular expressions.

# prevhistory
	# Show the previous history entry in the prompt menus (e.g. search).

# nexthistory	# Show the next history entry in the prompt menus (e.g. search).
# dontreplace	# Switch back to searching instead of replacing.
# gototext
	# Search for files matching a string in the file browser (reading or
	# writing files).
	
# dosformat	# When writing a file, switch to writing a DOS format (CR/LF).
# macformat	# When writing a file, switch to writing a Mac format.
# append	# When writing a file, append to the end instead of overwriting.
# prepend
	# When writing a file, ’prepend’ (write at the beginning) instead of
	# overwriting.

# backup	# When writing a file, create a backup of the current file.
# firstfile
	# Move to the first file when using the file browser (reading or
	# writing files).

# lastfile
	# Move to the last file when using the file browser (reading or writing
	# files).

# nohelp
	# Toggle showing/hiding the two-line list of key bindings at the
	# bottom of the screen.

# constupdate	# Constantly display the current line, column, word positions.
# morespace
	# Toggle showing/hiding the blank line which ’separates’ the ’title’
	# from the file text.

# smoothscroll	# Toggle smooth scrolling when moving via the arrow keys.
# whitespacedisplay	# Toggle whether whitespace is shown.
# smarthome	# Toggle whether the smart home key function is enabled.
# autoindent
bind ^P autoindent main
	# Toggle whether new lines will contain the same amount of whitespace
	# as the line above.

# cuttoend
	# Toggle whether cutting text will cut the whole line or just from the
	# current cursor position to the end of the line.

# nowrap	# Toggle whether long lines will be wrapped to the next line.
# suspendenable
	# Toggle whether the suspend sequence (normally ^Z) will suspend the
	# editor window.

# Valid menu sections are:
# main	# The main editor window where text is entered.
# search	# The search menu (AKA whereis).
# replace	# The ’search to replace’ menu.
# replacewith
	# The ’replace with’ menu, which comes up after ’search to replace’.

# gotoline	# The ’goto line (and column)’ menu.
# writeout	# The ’write file’ menu.
# insert	# The ’insert file’ menu.
# extcmd
	# The menu for inserting output from an external command, reached from
	# the insert menu.

# help	# The help menu.
# spell	# The interactive spell checker Yes/no menu.
# browser	# The file browser for inserting or writing a file.
# whereisfile	# The ’search for a file’ menu in the file browser.
# gotodir	# The ’go to directory’ menu.
# all	# A special name meaning: apply to all menus where this function exists.

# FILES
	# SYSCONFDIR/nanorc
		# System-wide configuration file
	# ~/.nanorc
		# Per-user configuration file
# SEE ALSO
	# nano(1)
	# /usr/share/doc/nano/examples/nanorc.sample (or equivalent on your system)
# AUTHOR
	# Chris Allegretta <chrisa@asty.org>, et al (see AUTHORS and THANKS for
	# details). This manual page was originally written by Jordi Mallach
	# <jordi@gnu.org>, for the Debian system (but may be used by others).
